@model BVS.ViewModels.Patients.PatientChartViewModel

@{
    ViewBag.Title = "Users";

}

<ol class="breadcrumb">
    <li>@Html.ActionLink( "Home", "Index", "Home" )</li>
    <li>@Html.ActionLink( "Patient List", "Index", "Patient" )</li>
    <li>@Html.ActionLink( "Patient", "Details", new { id = Model.Patient.ID } )</li>
    <li class="active">Measurement Chart</li>
</ol>
<h1>Patient Measurements Chart</h1>
<h2 class="entitysubtitle">@Model.Patient.FirstName @Model.Patient.LastName</h2>

<div class="panel panel-default r3-shadow">
    <div class="panel-heading">
        <div class="text-right">
            <a class="btn btn-success" href="@Url.Action( "MeasurementDownload", new { id = Model.Patient.ID } )">
                <span class="glyphicons glyphicons-edit"></span>
                Download Data
            </a>
        </div>
    </div>
    <div class="panel-body">
        @Html.DisplayFor( m => m.Patient )
    </div>
</div>

@*<style>
        #chart_container {
            width: @(Model.ChartWidth)px;
            height: 800px;
            border: 1px solid #ddd;
            padding: 1px;
            border-radius: 4px;
        }
    </style>*@

<div class="row">
    <div class="col-xs-12">
        <div style="overflow-x: auto">
            <div id="chart_container">
                <canvas id="patient_chart"></canvas>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    var ctx = $("#patient_chart");
    var barChart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets: [{
                label: 'Bladder Volume @(Model.StartDate.Value.ToShortDateString()) - @Model.EndDate.Value.ToShortDateString()',
                data: @Html.Raw( Json.Encode( Model.PatientMeasurements.Select( x => new { x = x.MeasurementOn, y = x.CalculatedVolume } ).OrderBy( x => x.x ) ) ),
                borderColor: "#c45850"
                }]
        },
        options: {
            scales: {
                xAxes: [{
                    type: 'time',
                    time: {
                        //unit: 'minute',
                        displayFormats: {
                            'minute': 'h:mm a',
                            'hour': 'MMM D hA',
                            'day' : 'MMM D'
                        },
                        //stepSize: 60,
                        min:'@(Model.StartDate)'
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
</script>